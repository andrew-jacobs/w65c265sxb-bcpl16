
Portable 65xx Assembler [17.12]

                             ;===============================================================================
                             ;
                             ; `7MM"""Yp,   .g8"""bgd `7MM"""Mq.`7MMF'
                             ;   MM    Yb .dP'     `M   MM   `MM. MM
                             ;   MM    dP dM'       `   MM   ,M9  MM
                             ;   MM"""bg. MM            MMmmdM9   MM
                             ;   MM    `Y MM.           MM        MM      ,
                             ;   MM    ,9 `Mb.     ,'   MM        MM     ,M
                             ; .JMMmmmd9    `"bmmmd'  .JMML.    .JMMmmmmMMM
                             ;
                             ; BCPL for the WDC W65C265SXB
                             ;-------------------------------------------------------------------------------
                             ; Copyright (C),2018 Andrew John Jacobs.
                             ; All rights reserved.
                             ;
                             ; This work is licensed under a Creative Commons Attribution NonCommercial-
                             ; ShareAlike 4.0 International License.
                             ;
                             ; See here for details:
                             ;
                             ;       https://creativecommons.org/licenses/by-nc-sa/4.0/
                             ;
                             ;-------------------------------------------------------------------------------
                             
                                             .65816
                             
                                             .include "w65c265.inc"
                             ;===============================================================================
                             ; __        ____  ____   ____ ____   __  ____
                             ; \ \      / / /_| ___| / ___|___ \ / /_| ___|
                             ;  \ \ /\ / / '_ \___ \| |     __) | '_ \___ \
                             ;   \ V  V /| (_) |__) | |___ / __/| (_) |__) |
                             ;    \_/\_/  \___/____/ \____|_____|\___/____/
                             ;
                             ; Western Design Center W65C265 device definitions
                             ;-------------------------------------------------------------------------------
                             ; Copyright (C)2015 HandCoded Software Ltd.
                             ; All rights reserved.
                             ;
                             ; This work is made available under the terms of the Creative Commons
                             ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
                             ; following URL to see the details.
                             ;
                             ; http://creativecommons.org/licenses/by-nc-sa/4.0/
                             ;
                             ;===============================================================================
                             ; Notes:
                             ;
                             ; Various macros and definitions for the W65C265 microcontroller.
                             ;
                             ;===============================================================================
                             ; Revision History:
                             ;
                             ; 2015-12-18 AJ Initial version

Portable 65xx Assembler [17.12]

                             ;-------------------------------------------------------------------------------
                             
                             ;===============================================================================
                             ; Hardware Registers
                             ;-------------------------------------------------------------------------------
                             
                             ;00DF00-1F CS0 Port Replacement & Expansion uninitialized
                             
         0000DF00          = PD0             .equ    $00DF00         ; Port 0 Data Register
         0000DF01          = PD1             .equ    $00DF01         ; Port 1 Data Register
         0000DF02          = PD2             .equ    $00DF02         ; Port 2 Data Register
         0000DF03          = PD3             .equ    $00DF03         ; Port 3 Data Register
         0000DF04          = PDD0            .equ    $00DF04         ; Port 0 Data Direction Register
         0000DF05          = PDD1            .equ    $00DF05         ; Port 1 Data Direction Register
         0000DF06          = PDD2            .equ    $00DF06         ; Port 2 Data Direction Register
         0000DF07          = PDD3            .equ    $00DF07         ; Port 3 Data Direction Register
                             
         0000DF20          = PD4             .equ    $00DF20         ; Port 4 Data Register
         0000DF21          = PD5             .equ    $00DF21         ; Port 5 Data Register
         0000DF22          = PD6             .equ    $00DF22         ; Port 6 Data Register
         0000DF23          = PD7             .equ    $00DF23         ; Port 7 Data Register
         0000DF24          = PDD4            .equ    $00DF24         ; Port 4 Data Direction Register
         0000DF25          = PDD5            .equ    $00DF25         ; Port 5 Data Direction Register
         0000DF26          = PDD6            .equ    $00DF26         ; Port 6 Data Direction Register
         0000DF27          = PCS7            .equ    $00DF27         ; Port 7 Chip Select
                             
                             ;00DF28-3F --- Reserved uninitialized
                             
         0000DF40          = BCR             .equ    $00DF40         ; Bus Control Register
         0000DF41          = SSCR            .equ    $00DF41         ; System Speed Control Register
         0000DF42          = TCR             .equ    $00DF42         ; Timer Control Register
         0000DF43          = TER             .equ    $00DF43         ; Timer Enable Register
         0000DF44          = TIFR            .equ    $00DF44         ; Timer Interrupt Flag Register
         0000DF45          = EIFR            .equ    $00DF45         ; Edge Interrupt Flag Register
         0000DF46          = TIER            .equ    $00DF46         ; Timer Interrupt Enable Register
         0000DF47          = EIER            .equ    $00DF47         ; Edge Interrupt Enable Register
         0000DF48          = UIFR            .equ    $00DF48         ; UART Interrupt Flag Register
         0000DF49          = UIER            .equ    $00DF49         ; UART Interrupt Enable Register
                             
         0000DF50          = T0LL            .equ    $00DF50         ; Timer 0 Latch Low
         0000DF51          = T0LH            .equ    $00DF51         ; Timer 0 Latch High
         0000DF52          = T1LL            .equ    $00DF52         ; Timer 1 Latch Low
         0000DF53          = T1LH            .equ    $00DF53         ; Timer 1 Latch High
         0000DF54          = T2LL            .equ    $00DF54         ; Timer 2 Latch Low
         0000DF55          = T2LH            .equ    $00DF55         ; Timer 2 Latch High
         0000DF56          = T3LL            .equ    $00DF56         ; Timer 3 Latch Low
         0000DF57          = T3LH            .equ    $00DF57         ; Timer 3 Latch High
         0000DF58          = T4LL            .equ    $00DF58         ; Timer 4 Latch Low
         0000DF59          = T4LH            .equ    $00DF59         ; Timer 4 Latch High
         0000DF5A          = T5LL            .equ    $00DF5A         ; Timer 5 Latch Low
         0000DF5B          = T5LH            .equ    $00DF5B         ; Timer 5 Latch High
         0000DF5C          = T6LL            .equ    $00DF5C         ; Timer 6 Latch Low
         0000DF5D          = T6LH            .equ    $00DF5D         ; Timer 6 Latch High
         0000DF5E          = T7LL            .equ    $00DF5E         ; Timer 7 Latch Low

Portable 65xx Assembler [17.12]

         0000DF5F          = T7LH            .equ    $00DF5F         ; Timer 7 Latch High
         0000DF60          = T0CL            .equ    $00DF60         ; Timer 0 Counter Low
         0000DF61          = T0CH            .equ    $00DF61         ; Timer 0 Counter High
         0000DF62          = T1CL            .equ    $00DF62         ; Timer 1 Counter Low
         0000DF63          = T1CH            .equ    $00DF63         ; Timer 1 Counter High
         0000DF64          = T2CL            .equ    $00DF64         ; Timer 2 Counter Low
         0000DF65          = T2CH            .equ    $00DF65         ; Timer 2 Counter High
         0000DF66          = T3CL            .equ    $00DF66         ; Timer 3 Counter Low
         0000DF67          = T3CH            .equ    $00DF67         ; Timer 3 Counter High
         0000DF68          = T4CL            .equ    $00DF68         ; Timer 4 Counter Low
         0000DF69          = T4CH            .equ    $00DF69         ; Timer 4 Counter High
         0000DF6A          = T5CL            .equ    $00DF6A         ; Timer 5 Counter Low
         0000DF6B          = T5CH            .equ    $00DF6B         ; Timer 5 Counter High
         0000DF6C          = T6CL            .equ    $00DF6C         ; Timer 6 Counter Low
         0000DF6D          = T6CH            .equ    $00DF6D         ; Timer 6 Counter High
         0000DF6E          = T7CL            .equ    $00DF6E         ; Timer 7 Counter Low
         0000DF6F          = T7CH            .equ    $00DF6F         ; Timer 7 Counter High
                             
                             ;00DFC0-FF CS1 COProcessor Expansion uninitialized
                             
         0000DF70          = ACSR0           .equ    $00DF70         ; UART 0 Control/Status Register
         0000DF71          = ARTD0           .equ    $00DF71         ; UART 0 Data Register
         0000DF72          = ACSR1           .equ    $00DF72         ; UART 1 Control/Status Register
         0000DF73          = ARTD1           .equ    $00DF73         ; UART 1 Data Register
         0000DF74          = ACSR2           .equ    $00DF74         ; UART 2 Control/Status Register
         0000DF75          = ARTD2           .equ    $00DF75         ; UART 2 Data Register
         0000DF76          = ACSR3           .equ    $00DF76         ; UART 3 Control/Status Register
         0000DF77          = ARTD3           .equ    $00DF77         ; UART 3 Data Register
         0000DF78          = PIBFR           .equ    $00DF78         ; Parallel Interface Flag Register
         0000DF79          = PIBER           .equ    $00DF79         ; Parallel Interface Enable Register
         0000DF7A          = PIR2            .equ    $00DF7A         ; Parallel Interface Register 2
         0000DF7B          = PIR3            .equ    $00DF7B         ; Parallel Interface Register 3
         0000DF7C          = PIR4            .equ    $00DF7C         ; Parallel Interface Register 4
         0000DF7D          = PIR5            .equ    $00DF7D         ; Parallel Interface Register 5
         0000DF7E          = PIR6            .equ    $00DF7E         ; Parallel Interface Register 6
         0000DF7F          = PIR7            .equ    $00DF7F         ; Parallel Interface Register 7
                             
                             ;00DF80-BF RAM RAM Registers uninitialized
                             
                                             .include "w65c816.inc"
                             ;==============================================================================
                             ; __        ____  ____   ____ ___  _  __   
                             ; \ \      / / /_| ___| / ___( _ )/ |/ /_  
                             ;  \ \ /\ / / '_ \___ \| |   / _ \| | '_ \ 
                             ;   \ V  V /| (_) |__) | |__| (_) | | (_) |
                             ;    \_/\_/  \___/____/ \____\___/|_|\___/ 
                             ;
                             ; Western Design Center W65C816 device definitions                                          
                             ;------------------------------------------------------------------------------
                             ; Copyright (C)2015 HandCoded Software Ltd.
                             ; All rights reserved.
                             ;
                             ; This work is made available under the terms of the Creative Commons
                             ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the

Portable 65xx Assembler [17.12]

                             ; following URL to see the details.
                             ;
                             ; http://creativecommons.org/licenses/by-nc-sa/4.0/
                             ;
                             ;===============================================================================
                             ; Notes:
                             ;
                             ; Various macros and definitions for the W65C816 microprocessor.
                             ;
                             ;===============================================================================
                             ; Revision History:
                             ;
                             ; 2015-12-18 AJ Initial version
                             ;-------------------------------------------------------------------------------
                             
                             ;==============================================================================
                             ; Status Register Bits
                             ;------------------------------------------------------------------------------
                             
         00000080          = N_FLAG          .equ    1<<7
         00000040          = V_FLAG          .equ    1<<6
         00000020          = M_FLAG          .equ    1<<5
         00000010          = X_FLAG          .equ    1<<4
         00000010          = B_FLAG          .equ    1<<4
         00000008          = D_FLAG          .equ    1<<3
         00000004          = I_FLAG          .equ    1<<2
         00000002          = Z_FLAG          .equ    1<<1
         00000001          = C_FLAG          .equ    1<<0
                             
                             ;==============================================================================
                             ; Macros
                             ;------------------------------------------------------------------------------
                             
                             ; Puts the processor in emulation mode. A, X and Y become 8-bits and the stack
                             ; is fixed at $0100-$01ff. 
                             
                             emulate         .macro
                                             sec
                                             xce
                                             .endm
                             
                             ; Puts the processor in native mode. The size of the memory and index register
                             ; operations is not controlled by the M & X bits in the status register.
                             
                             native          .macro
                                             clc
                                             xce
                                             .endm
                             
                             ; Resets the M bit making the accumulator and memory accesses 16-bits wide.
                              
                             long_a          .macro
                                             rep     #M_FLAG
                                             .longa  on

Portable 65xx Assembler [17.12]

                                             .endm
                             
                             ; Resets the X bit making the index registers 16-bits wide
                             
                             long_i          .macro
                                             rep     #X_FLAG
                                             .longi  on
                                             .endm
                             
                             ; Resets the M and X bits making the accumulator, memory accesses and index
                             ; registers 16-bits wide.
                                             
                             long_ai         .macro
                                             rep     #M_FLAG|X_FLAG
                                             .longa  on
                                             .longi  on
                                             .endm
                             
                             ; Sets the M bit making the accumulator and memory accesses 8-bits wide.
                             
                             short_a         .macro
                                             sep     #M_FLAG
                                             .longa  off
                                             .endm
                             
                             ; Sets the X bit making the index registers 8-bits wide.
                             
                             short_i         .macro
                                             sep     #X_FLAG
                                             .longi  off
                                             .endm
                                             
                             ; Sets the M & X bits making the accumulator, memory accesses and index
                             ; registers 8-bits wide.
                             
                             short_ai        .macro
                                             sep     #M_FLAG|X_FLAG
                                             .longa  off
                                             .longi  off
                                             .endm
                                             .include "w65c265sxb.inc"
                             ;==============================================================================
                             ; __        ____  ____   ____ ____   __  ____ ______  ______  
                             ; \ \      / / /_| ___| / ___|___ \ / /_| ___/ ___\ \/ / __ ) 
                             ;  \ \ /\ / / '_ \___ \| |     __) | '_ \___ \___ \\  /|  _ \ 
                             ;   \ V  V /| (_) |__) | |___ / __/| (_) |__) |__) /  \| |_) |
                             ;    \_/\_/  \___/____/ \____|_____|\___/____/____/_/\_\____/ 
                             ;
                             ; Western Design Center W65C265SXB Development Board Hardware Definitions
                             ;------------------------------------------------------------------------------
                             ; Copyright (C)2015 HandCoded Software Ltd.
                             ; All rights reserved.
                             ;
                             ; This work is made available under the terms of the Creative Commons

Portable 65xx Assembler [17.12]

                             ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
                             ; following URL to see the details.
                             ;
                             ; http://creativecommons.org/licenses/by-nc-sa/4.0/
                             ;
                             ;==============================================================================
                             ; Notes:
                             ;
                             ;------------------------------------------------------------------------------
                             
         00384000          = OSC_FREQ        .equ    3686400         ; SXB runs at 3.6864MHz
                             
                             ;===============================================================================
                             ; Constants
                             ;-------------------------------------------------------------------------------
                             
         00000017          = BRG_9600        .equ    OSC_FREQ / (16 * 9600)-1
                             
                             ; The starting addresses of the data memory area using (/CS7)
                             
         00C00000          = MEML            .equ    $c00000         ; Lo byte
         00C10000          = MEMH            .equ    $c10000         ; Hi byte
                             
                             ; CH376S USB Interface Commands
                             
         00000002          = SET_BAUDRATE    .equ    $02
         00000003          = ENTER_SLEEP     .equ    $03
         00000005          = RESET_ALL       .equ    $05
         00000006          = CHECK_EXIST     .equ    $06
         00000022          = GET_STATUS      .equ    $22
                             
         000000AA          = SET_FILE_NAME   .equ    $aa             ; FIX
                             
                             ;===============================================================================
                             ; Data Areas
                             ;-------------------------------------------------------------------------------
                             
                                             .page0
                                             .org    $00
                             
00:0000  0000              : ACCA            .space  2
00:0002  0000              : ACCB            .space  2
                             
00:0004  0000              : G               .space  2
00:0006  0000              : C               .space  2
00:0008  0000              : P               .space  2
                             
00:000A  0000              : W               .space  2
                             
00:000C  0000              : FI              .space  2
00:000E  0000              : FO              .space  2
                             
                             ;-------------------------------------------------------------------------------
                             

Portable 65xx Assembler [17.12]

                                             .bss
                                             .org    $0200
                             
00:0200  0000000000000000> : COMMAND         .space  256
                             
                             ;===============================================================================
                             ;-------------------------------------------------------------------------------
                             
                                             .code
                                             .org    $0400
                             
                                             .longa  off
                                             .longi  off
                             RESET:
00:0400  78                :                 sei
                                             emulate
00:0401  38                +                 sec
00:0402  FB                +                 xce
00:0403  A2FF              :                 ldx     #$ff
00:0405  9A                :                 txs
                             
                             ; Reset Hardware
                             
00:0406  A910              :                 lda     #%00010000              ; Set UARTs to use timer 3
00:0408  1C42DF            :                 trb     TCR
00:040B  A917              :                 lda     #<BRG_9600              ; And set baud rate
00:040D  8D66DF            :                 sta     T3CL
00:0410  A900              :                 lda     #>BRG_9600
00:0412  8D67DF            :                 sta     T3CH
                             
00:0415  A908              :                 lda     #1<<3                   ; Enable timer 3
00:0417  0C43DF            :                 tsb     TER
                             
00:041A  A925              :                 lda     #%00100101              ; Set UART3 & 2 for 8-N-1
00:041C  8D76DF            :                 sta     ACSR3
00:041F  8D74DF            :                 sta     ACSR2
                             
                                             native
00:0422  18                +                 clc
00:0423  FB                +                 xce
                                             long_i
00:0424  C210              +                 rep     #X_FLAG
                           +                 .longi  on
                                             
00:0426  202007            :                 jsr     NewLine
00:0429  A24B07            :                 ldx     #BOOT_STRING
00:042C  202307            :                 jsr     Print
                                     
                             ; Mount Disk
                             
                             ; Read Command
                             
00:042F  202007            :                 jsr     NewLine
                                             

Portable 65xx Assembler [17.12]

00:0432  A915              :                 lda     #$15
00:0434  20F806            :                 jsr     SendCommand
00:0437  A906              :                 lda     #$06
00:0439  202F07            :                 jsr     DiskTx
                                             repeat
00:043C  203F07            :                  jsr    DiskRx
00:043F  204504            :                  jsr    Hex2
00:0442  80F8              :                 forever
                             
00:0444  00                :                 brk
                             
                             
                             ; Load Target
                             
                             
                             Hex2:
00:0445  48                :                 pha
00:0446  4A                :                 lsr     a
00:0447  4A                :                 lsr     a
00:0448  4A                :                 lsr     a
00:0449  4A                :                 lsr     a
00:044A  204E04            :                 jsr     Hex
00:044D  68                :                 pla
                             Hex:
00:044E  290F              :                 and     #$0f
00:0450  0930              :                 ora     #'0'
00:0452  C93A              :                 cmp     #'9'+1
00:0454  9002              :                 if      cs
00:0456  6906              :                  adc    #6
                                             endif
00:0458  4C0807            :                 jmp     UartTx
                             
                             ;===============================================================================
                             ; INTCODE Interpreter
                             ;-------------------------------------------------------------------------------
                             
                             ;        15  14  13  12  11  10  9   8   7   6   5   4   3   2   1   0
                             ;       +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
                             ;   +0  |  Opcode   | I | P | G | X |       Operand (when X = 0)        |
                             ;       +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
                             ;   +1  |                     Operand (when X = 1)                      |
                             ;       +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
                             
                                             .longa  on
                                             .longi  on
                             
00:045B  6400              :                 stz     ACCA
00:045D  6402              :                 stz     ACCB
                             
00:045F  640E              :                 stz     FO
00:0461  640E              :                 stz     FO
00:0463  E60E              :                 inc     FO
                             
                             Step:

Portable 65xx Assembler [17.12]

00:0465  A606              :                 ldx     C               ; Fetch the next instruction
                                             short_a
00:0467  E220              +                 sep     #M_FLAG
                           +                 .longa  off
00:0469  BF0000C1          :                 lda     >MEMH,x
00:046D  EB                :                 xba
00:046E  BF0000C0          :                 lda     >MEML,x
                                             long_a
00:0472  C220              +                 rep     #M_FLAG
                           +                 .longa  on
00:0474  E8                :                 inx
00:0475  850A              :                 sta     W
                             
00:0477  890002            :                 bit     #$0200          ; Short operand?
00:047A  D006              :                 if eq                   ; Yes, extract from instruction
00:047C  29FF01            :                  and    #$01ff
00:047F  A8                :                  tay
00:0480  800F              :                 else
                                              short_a                ; No, fetch from next word
00:0482  E220              +                 sep     #M_FLAG
                           +                 .longa  off
00:0484  BF0000C1          :                  lda    >MEMH,x
00:0488  EB                :                  xba
00:0489  BF0000C0          :                  lda    >MEML,x
                                              long_a
00:048D  C220              +                 rep     #M_FLAG
                           +                 .longa  on
00:048F  E8                :                  inx
00:0490  A8                :                  tay                    ; Save in Y
                                             endif
00:0491  8606              :                 stx     C               ; Update program counter
                             
00:0493  A50A              :                 lda     W
00:0495  890008            :                 bit     #$0800          ; Relative to stack?
00:0498  F007              :                 if ne
00:049A  18                :                  clc
00:049B  98                :                  tya
00:049C  6508              :                  adc    P
00:049E  A8                :                  tay
00:049F  800A              :                 else
00:04A1  890004            :                  bit    #$0400          ; Relative to global vector?
00:04A4  F005              :                  if ne
00:04A6  18                :                   clc
00:04A7  98                :                   tya
00:04A8  6504              :                   adc   G
00:04AA  A8                :                   tay
                                              endif
                                             endif
                             
00:04AB  A50A              :                 lda     W
00:04AD  890010            :                 bit     #$1000          ; Indirect memory address?
00:04B0  F00F              :                 if ne
00:04B2  BB                :                  tyx                    ; Yes, look up address
                                              short_a

Portable 65xx Assembler [17.12]

00:04B3  E220              +                 sep     #M_FLAG
                           +                 .longa  off
00:04B5  BF0000C1          :                  lda    >MEMH,x
00:04B9  EB                :                  xba
00:04BA  BF0000C0          :                  lda    >MEML,x
                                              long_a
00:04BE  C220              +                 rep     #M_FLAG
                           +                 .longa  on
00:04C0  A8                :                  tay                    ; And save in Y
                                             endif
                             
00:04C1  A50A              :                 lda     W               ; Extract opcode
00:04C3  2900E0            :                 and     #$e000
00:04C6  EB                :                 xba
00:04C7  4A                :                 lsr     a
00:04C8  4A                :                 lsr     a
00:04C9  4A                :                 lsr     a
00:04CA  4A                :                 lsr     a
00:04CB  AA                :                 tax
00:04CC  7CCF04            :                 jmp     (Opcode,x)
                             Opcode:
00:04CF  DF04              :                 .word   OpcodeL
00:04D1  F604              :                 .word   OpcodeS
00:04D3  0905              :                 .word   OpcodeA
00:04D5  1205              :                 .word   OpcodeJ
00:04D7  1705              :                 .word   OpcodeT
00:04D9  2005              :                 .word   OpcodeF
00:04DB  2905              :                 .word   OpcodeK
00:04DD  2C05              :                 .word   OpcodeX
                             
                             ;-------------------------------------------------------------------------------
                             ; Memory Load
                             
                             OpcodeL:
00:04DF  A500              :                 lda     ACCA            ; Transfer A into B
00:04E1  8502              :                 sta     ACCB
00:04E3  BB                :                 tyx                     ; Load from M[D]
                                             short_a
00:04E4  E220              +                 sep     #M_FLAG
                           +                 .longa  off
00:04E6  BF0000C1          :                 lda     >MEMH,x
00:04EA  EB                :                 xba
00:04EB  BF0000C0          :                 lda     >MEML,x
                                             long_a
00:04EF  C220              +                 rep     #M_FLAG
                           +                 .longa  on
00:04F1  8500              :                 sta     ACCA            ; Save in A
00:04F3  4C6504            :                 jmp     Step
                             
                             ;-------------------------------------------------------------------------------
                             ; Memory Store
                             
                             OpcodeS:
00:04F6  A500              :                 lda     ACCA

Portable 65xx Assembler [17.12]

00:04F8  BB                :                 tyx
                                             short_a
00:04F9  E220              +                 sep     #M_FLAG
                           +                 .longa  off
00:04FB  9F0000C0          :                 sta     >MEML,x
00:04FF  EB                :                 xba
00:0500  9F0000C1          :                 sta     >MEMH,x
                                             long_a
00:0504  C220              +                 rep     #M_FLAG
                           +                 .longa  on
00:0506  4C6504            :                 jmp     Step
                             
                             ;-------------------------------------------------------------------------------
                             ; Addition
                             
                             OpcodeA:
00:0509  18                :                 clc
00:050A  98                :                 tya
00:050B  6500              :                 adc     ACCA
00:050D  8500              :                 sta     ACCA
00:050F  4C6504            :                 jmp     Step
                             
                             ;-------------------------------------------------------------------------------
                             ; Unconditional Jump
                             
                             OpcodeJ:
00:0512  8406              :                 sty     C
00:0514  4C6504            :                 jmp     Step
                             
                             ;-------------------------------------------------------------------------------
                             ; Jump if True
                             
                             OpcodeT:
00:0517  A500              :                 lda     ACCA
00:0519  F002              :                 if ne
00:051B  8406              :                  sty    C
                                             endif
00:051D  4C6504            :                 jmp     Step
                             
                             ;-------------------------------------------------------------------------------
                             ; Jump if False
                             
                             OpcodeF:
00:0520  A500              :                 lda     ACCA
00:0522  D002              :                 if eq
00:0524  8406              :                  sty    C
                                             endif
00:0526  4C6504            :                 jmp     Step
                             
                             ;-------------------------------------------------------------------------------
                             ; Call
                             
                             OpcodeK:
                             

Portable 65xx Assembler [17.12]

00:0529  4C6504            :                 jmp     Step
                             
                             ;-------------------------------------------------------------------------------
                             ; Execute Function
                             
                             OpcodeX:
00:052C  98                :                 tya                     ; Get function index
00:052D  F00B              :                 if ne                   ; Not zero?
00:052F  C92800            :                  cmp    #40             ; .. but less than 40?
00:0532  B006              :                  if cc
00:0534  3A                :                   dec   a               ; Scale to jump table index
00:0535  0A                :                   asl   a
00:0536  AA                :                   tax
00:0537  7C3C05            :                   jmp   (Function,x)    ; And goto to handler
                                              endif
                                             endif
                             
00:053A  80FE              :                 bra     $               ; FIX: Invalid function
                             
                             Function:
00:053C  8A05              :                 .word   Function1
00:053E  9E05              :                 .word   Function2
00:0540  A905              :                 .word   Function3
00:0542  B305              :                 .word   Function4
00:0544  B305              :                 .word   Function5
00:0546  B305              :                 .word   Function6
00:0548  B305              :                 .word   Function7
00:054A  B305              :                 .word   Function8
00:054C  BD05              :                 .word   Function9
00:054E  C705              :                 .word   Function10
00:0550  D405              :                 .word   Function11
00:0552  E105              :                 .word   Function12
00:0554  E405              :                 .word   Function13
00:0556  E705              :                 .word   Function14
00:0558  EA05              :                 .word   Function15
00:055A  ED05              :                 .word   Function16
00:055C  0606              :                 .word   Function17
00:055E  1F06              :                 .word   Function18
00:0560  2806              :                 .word   Function19
00:0562  3106              :                 .word   Function20
00:0564  3A06              :                 .word   Function21
00:0566  4606              :                 .word   Function22
00:0568  4806              :                 .word   Function23
00:056A  4B06              :                 .word   Function24
00:056C  5306              :                 .word   Function25
00:056E  5B06              :                 .word   Function26
00:0570  5E06              :                 .word   Function27
00:0572  6106              :                 .word   Function28
00:0574  6406              :                 .word   Function29
00:0576  6706              :                 .word   Function30
00:0578  6A06              :                 .word   Function31
00:057A  7E06              :                 .word   Function32
00:057C  8906              :                 .word   Function33
00:057E  8C06              :                 .word   Function34

Portable 65xx Assembler [17.12]

00:0580  8F06              :                 .word   Function35
00:0582  9206              :                 .word   Function36
00:0584  B306              :                 .word   Function37
00:0586  D606              :                 .word   Function38
00:0588  DE06              :                 .word   Function39
                             
                             ;-------------------------------------------------------------------------------
                             ; A = M[A]
                             
                             Function1:
00:058A  A600              :                 ldx     ACCA            ; Fetch memory address
                                             short_a
00:058C  E220              +                 sep     #M_FLAG
                           +                 .longa  off
00:058E  BF0000C1          :                 lda     >MEMH,x         ; Recover the value
00:0592  EB                :                 xba
00:0593  BF0000C0          :                 lda     >MEML,x
                                             long_a
00:0597  C220              +                 rep     #M_FLAG
                           +                 .longa  on
00:0599  8500              :                 sta     ACCA            ; And store
00:059B  4C6504            :                 jmp     Step            ; Done.
                             
                             ;-------------------------------------------------------------------------------
                             ; A = -A
                             
                             Function2:
00:059E  38                :                 sec
00:059F  A90000            :                 lda     #0              ; Subtract A from zero
00:05A2  E500              :                 sbc     ACCA
00:05A4  8500              :                 sta     ACCA            ; And store
00:05A6  4C6504            :                 jmp     Step            ; Done.
                             
                             ;-------------------------------------------------------------------------------
                             ; A = ~A
                             
                             Function3:
00:05A9  A9FFFF            :                 lda     #$ffff          ; Invert all bits in A
00:05AC  4500              :                 eor     ACCA
00:05AE  8500              :                 sta     ACCA            ; And store
00:05B0  4C6504            :                 jmp     Step            ; Done.
                             
                             ;-------------------------------------------------------------------------------
                             
                             Function4:
                             Function5:
                             Function6:
                             Function7:
                             
                             ;-------------------------------------------------------------------------------
                             ; A = B + A
                             
                             Function8:
00:05B3  18                :                 clc

Portable 65xx Assembler [17.12]

00:05B4  A502              :                 lda     ACCB
00:05B6  6500              :                 adc     ACCA
00:05B8  8500              :                 sta     ACCA
00:05BA  4C6504            :                 jmp     Step
                             
                             ;-------------------------------------------------------------------------------
                             ; A = B - A
                             
                             Function9:
00:05BD  38                :                 sec
00:05BE  A502              :                 lda     ACCB
00:05C0  E500              :                 sbc     ACCA
00:05C2  8500              :                 sta     ACCA
00:05C4  4C6504            :                 jmp     Step
                             
                             ;-------------------------------------------------------------------------------
                             ; A = (B == A)
                             
                             Function10:
00:05C7  A500              :                 lda     ACCA
00:05C9  6400              :                 stz     ACCA
00:05CB  C502              :                 cmp     ACCB
00:05CD  D002              :                 if eq
00:05CF  C600              :                  dec    ACCA
                                             endif
00:05D1  4C6504            :                 jmp     Step
                             
                             ;-------------------------------------------------------------------------------
                             ; A = (B != A)
                             
                             Function11:
00:05D4  A500              :                 lda     ACCA
00:05D6  6400              :                 stz     ACCA
00:05D8  C502              :                 cmp     ACCB
00:05DA  F002              :                 if ne
00:05DC  C600              :                  dec    ACCA
                                             endif
00:05DE  4C6504            :                 jmp     Step
                             
                             ;-------------------------------------------------------------------------------
                             
                             Function12:
00:05E1  4C6504            :                 jmp     Step
                             
                             ;-------------------------------------------------------------------------------
                             
                             Function13:
00:05E4  4C6504            :                 jmp     Step
                             
                             ;-------------------------------------------------------------------------------
                             
                             Function14:
00:05E7  4C6504            :                 jmp     Step
                             

Portable 65xx Assembler [17.12]

                             ;-------------------------------------------------------------------------------
                             
                             Function15:
00:05EA  4C6504            :                 jmp     Step
                             
                             ;-------------------------------------------------------------------------------
                             ; A = B << A
                             
                             Function16:
00:05ED  A502              :                 lda     ACCB
00:05EF  A600              :                 ldx     ACCA
00:05F1  F00E              :                 if ne
00:05F3  E01600            :                  cpx    #$16
00:05F6  9005              :                  if cs
00:05F8  6400              :                   stz   ACCA
00:05FA  4C6504            :                   jmp   Step
                                              endif
                                              repeat
00:05FD  0A                :                   asl   a
00:05FE  CA                :                   dex
00:05FF  D0FC              :                  until eq
                                             endif
00:0601  8500              :                 sta     ACCA
00:0603  4C6504            :                 jmp     Step
                             
                             ;-------------------------------------------------------------------------------
                             ; A = B >> A
                             
                             Function17:
00:0606  A502              :                 lda     ACCB
00:0608  A600              :                 ldx     ACCA
00:060A  F00E              :                 if ne
00:060C  E01600            :                  cpx    #$16
00:060F  9005              :                  if cs
00:0611  6400              :                   stz   ACCA
00:0613  4C6504            :                   jmp   Step
                                              endif
                                              repeat
00:0616  4A                :                   lsr   a
00:0617  CA                :                   dex
00:0618  D0FC              :                  until eq
                                             endif
00:061A  8500              :                 sta     ACCA
00:061C  4C6504            :                 jmp     Step
                             
                             ;-------------------------------------------------------------------------------
                             ; A = B & A
                             
                             Function18:
00:061F  A502              :                 lda     ACCB
00:0621  2500              :                 and     ACCA
00:0623  8500              :                 sta     ACCA
00:0625  4C6504            :                 jmp     Step
                             

Portable 65xx Assembler [17.12]

                             ;-------------------------------------------------------------------------------
                             ; A = B | A
                             
                             Function19:
00:0628  A502              :                 lda     ACCB
00:062A  0500              :                 ora     ACCA
00:062C  8500              :                 sta     ACCA
00:062E  4C6504            :                 jmp     Step
                             
                             ;-------------------------------------------------------------------------------
                             ; A = B ^ A
                             
                             Function20:
00:0631  A502              :                 lda     ACCB
00:0633  4500              :                 eor     ACCA
00:0635  8500              :                 sta     ACCA
00:0637  4C6504            :                 jmp     Step
                             
                             ;-------------------------------------------------------------------------------
                             ; A = ~(B ^ A)
                             
                             Function21:
00:063A  A502              :                 lda     ACCB
00:063C  4500              :                 eor     ACCA
00:063E  49FFFF            :                 eor     #$ffff
00:0641  8500              :                 sta     ACCA
00:0643  4C6504            :                 jmp     Step
                             
                             ;-------------------------------------------------------------------------------
                             
                             Function22:
00:0646  80FE              :                 bra     $               ; FIX: Exit
                             
                             ;-------------------------------------------------------------------------------
                             
                             Function23:
00:0648  4C6504            :                 jmp     Step
                             
                             ;-------------------------------------------------------------------------------
                             ; FI = A-1
                             
                             Function24:
00:064B  A500              :                 lda     ACCA
00:064D  3A                :                 dec     a
00:064E  850C              :                 sta     FI
00:0650  4C6504            :                 jmp     Step
                             
                             ;-------------------------------------------------------------------------------
                             ; FO = A-1
                             
                             Function25:
00:0653  A500              :                 lda     ACCA
00:0655  3A                :                 dec     a
00:0656  850E              :                 sta     FO

Portable 65xx Assembler [17.12]

00:0658  4C6504            :                 jmp     Step
                             
                             ;-------------------------------------------------------------------------------
                             ; Read a byte
                             
                             Function26:
00:065B  4C6504            :                 jmp     Step
                             
                             ;-------------------------------------------------------------------------------
                             ; Write a byte
                             
                             Function27:
00:065E  4C6504            :                 jmp     Step
                             
                             ;-------------------------------------------------------------------------------
                             ; Open for read
                             
                             Function28:
00:0661  4C6504            :                 jmp     Step
                             
                             ;-------------------------------------------------------------------------------
                             ; Open for write
                             
                             Function29:
00:0664  4C6504            :                 jmp     Step
                             
                             ;-------------------------------------------------------------------------------
                             ; Stop
                             
                             Function30:
00:0667  4C6504            :                 jmp     Step
                             
                             ;-------------------------------------------------------------------------------
                             ; A = M[P]
                             
                             Function31:
00:066A  A608              :                 ldx     P
                                             short_a
00:066C  E220              +                 sep     #M_FLAG
                           +                 .longa  off
00:066E  BF0000C1          :                 lda     >MEMH,x
00:0672  EB                :                 xba
00:0673  BF0000C0          :                 lda     >MEML,x
                                             long_a
00:0677  C220              +                 rep     #M_FLAG
                           +                 .longa  on
00:0679  8500              :                 sta     ACCA
00:067B  4C6504            :                 jmp     Step
                             
                             ;-------------------------------------------------------------------------------
                             ; P,C = A,B
                             
                             Function32:
00:067E  A500              :                 lda     ACCA

Portable 65xx Assembler [17.12]

00:0680  8508              :                 sta     P
00:0682  A502              :                 lda     ACCB
00:0684  8506              :                 sta     C
00:0686  4C6504            :                 jmp     Step
                             
                             ;-------------------------------------------------------------------------------
                             
                             Function33:
00:0689  4C6504            :                 jmp     Step
                             
                             ;-------------------------------------------------------------------------------
                             
                             Function34:
00:068C  4C6504            :                 jmp     Step
                             
                             ;-------------------------------------------------------------------------------
                             
                             Function35:
00:068F  4C6504            :                 jmp     Step
                             
                             ;-------------------------------------------------------------------------------
                             ; GETBYTE (A,B)
                             
                             Function36:
00:0692  A502              :                 lda     ACCB            ; Work out byte offset
00:0694  4A                :                 lsr     a
00:0695  08                :                 php                     ; Save carry
00:0696  18                :                 clc                     ; Add base word address
00:0697  6500              :                 adc     ACCA
00:0699  AA                :                 tax                     ; Save in index register
00:069A  28                :                 plp                     ; Pull back carry
                                             short_a
00:069B  E220              +                 sep     #M_FLAG
                           +                 .longa  off
00:069D  B006              :                 if cc
00:069F  BF0000C1          :                  lda    >MEMH,x         ; Load from either high
00:06A3  8004              :                 else
00:06A5  BF0000C0          :                  lda    >MEML,x         ; .. or low byte
                                             endif
                                             long_a
00:06A9  C220              +                 rep     #M_FLAG
                           +                 .longa  on
00:06AB  29FF00            :                 and     #$00ff          ; Mask to byte value
00:06AE  8500              :                 sta     ACCA            ; And save
00:06B0  4C6504            :                 jmp     Step            ; Done
                             
                             ;-------------------------------------------------------------------------------
                             ; PUTBYTE(A,B,M[P+4])
                             
                             Function37:
00:06B3  A502              :                 lda     ACCB            ; Work out byte offset
00:06B5  4A                :                 lsr     a
00:06B6  08                :                 php                     ; Save carry
00:06B7  18                :                 clc                     ; Add base word address

Portable 65xx Assembler [17.12]

00:06B8  6500              :                 adc     ACCA
00:06BA  A8                :                 tay                     ; Save in index register
00:06BB  A608              :                 ldx     P               ; Fetch stack pointer
00:06BD  28                :                 plp                     ; Pull back carry
                                             short_a
00:06BE  E220              +                 sep     #M_FLAG
                           +                 .longa  off
00:06C0  BF0400C0          :                 lda     >MEML+4,x       ; Fetch byte to store
00:06C4  BB                :                 tyx
00:06C5  B006              :                 if cc
00:06C7  9F0000C1          :                  sta    >MEMH,x         ; Save in either high
00:06CB  8004              :                 else
00:06CD  9F0000C0          :                  sta    >MEML,x         ; .. or low byte
                                             endif
                                             long_a
00:06D1  C220              +                 rep     #M_FLAG
                           +                 .longa  on
00:06D3  4C6504            :                 jmp     Step            ; Done.
                             
                             ;-------------------------------------------------------------------------------
                             ; A = FI+1
                             
                             Function38:
00:06D6  A50C              :                 lda     FI
00:06D8  1A                :                 inc     a
00:06D9  8500              :                 sta     ACCA
00:06DB  4C6504            :                 jmp     Step
                             
                             ;-------------------------------------------------------------------------------
                             ; A = FO+1
                             
                             Function39:
00:06DE  A50E              :                 lda     FO
00:06E0  1A                :                 inc     a
00:06E1  8500              :                 sta     ACCA
00:06E3  4C6504            :                 jmp     Step
                             
                             ;===============================================================================
                             ; CH376S Module Interface
                             ;-------------------------------------------------------------------------------
                             
                             
                                             .longa  off
                             SetFileName:
00:06E6  A9AA              :                 lda     #SET_FILE_NAME  ; Send command
00:06E8  20F806            :                 jsr     SendCommand
                                             repeat
00:06EB  BD0000            :                  lda    !0,x            ; Followed by null terminated
00:06EE  08                :                  php                    ; .. string
00:06EF  202F07            :                  jsr    DiskTx
00:06F2  28                :                  plp
00:06F3  D0F6              :                 until eq
00:06F5  4C0707            :                 jmp     ReadStatus
                             

Portable 65xx Assembler [17.12]

                             
                             ; Transmit the command synchronisation prefix to the CH376 followed by the
                             ; command code.
                             
                                             .longa  off
                             SendCommand:
00:06F8  48                :                 pha                     ; Save the command
00:06F9  A957              :                 lda     #$57            ; Send the prefix
00:06FB  202F07            :                 jsr     DiskTx
00:06FE  A9AB              :                 lda     #$ab
00:0700  202F07            :                 jsr     DiskTx
00:0703  68                :                 pla                     ; Recover command
00:0704  4C2F07            :                 jmp     DiskTx          ; And send
                             
                             ;
                                             .longa  off
                             ReadStatus:
00:0707  60                :                 rts
                             
                             ;===============================================================================
                             ; UART Interfaces
                             ;-------------------------------------------------------------------------------
                             
                             ; Use UART3 to communicate with the console
                             ; Use UART2 to communicate with the CH376S module
                             
                                             .longa  off
                             UartTx:
00:0708  48                :                 pha
00:0709  A980              :                 lda     #1<<7
                                             repeat
00:070B  2C48DF            :                  bit    UIFR
00:070E  F0FB              :                 until   ne
00:0710  68                :                 pla
00:0711  8D77DF            :                 sta     ARTD3
00:0714  60                :                 rts
                             
                                             .longa  off
                             UartRx:
00:0715  A940              :                 lda     #1<<6
                                             repeat
00:0717  2C48DF            :                  bit    UIFR
00:071A  F0FB              :                 until   ne
00:071C  AD77DF            :                 lda     ARTD3
00:071F  60                :                 rts
                                             
                                             .longi  on
                             NewLine:
00:0720  A26407            :                 ldx     #CRLF_STRING
                                             
                             Print:
                                             repeat
00:0723  BD0000            :                  lda    !0,x
00:0726  F006              :                  break  eq

Portable 65xx Assembler [17.12]

00:0728  200807            :                  jsr    UartTx
00:072B  E8                :                  inx
00:072C  80F5              :                 forever
00:072E  60                :                 rts
                             
                             ;-------------------------------------------------------------------------------
                             
                                             .longa  off
                             DiskTx:
00:072F  48                :                 pha
00:0730  A920              :                 lda     #1<<5
                                             repeat
00:0732  2C48DF            :                  bit    UIFR
00:0735  F0FB              :                 until   ne
00:0737  68                :                 pla
00:0738  8D75DF            :                 sta     ARTD2
00:073B  4C4504            :         jmp     Hex2
00:073E  60                :                 rts
                             
                             
                                             .longa  off
                             DiskRx:
00:073F  A910              :                 lda     #1<<4
                                             repeat
00:0741  2C48DF            :                  bit    UIFR
00:0744  F0FB              :                 until   ne
00:0746  AD75DF            :                 lda     ARTD2
00:0749  60                :                 rts
00:074A  60                :                 rts
                                             
                             ;===============================================================================
                             ;-------------------------------------------------------------------------------
                             
00:074B  0D0A573635433236> : BOOT_STRING     .byte   $0d,$0a,"W65C265SXB BCPL [18.03]"
00:0764  0D0A00            : CRLF_STRING     .byte   $0d,$0a,$00
                             
                             
                             ;               .org    $fffc
                             ;               .word   RESET
                             
                                             .end


Portable 65xx Assembler [17.12]

Symbol Table

ACCA                             00000000  | ACCA                             00000000 
ACCB                             00000002  | __6501__                         00000000 
ACSR0                            0000DF70  | __6502__                         00000000 
ACSR1                            0000DF72  | __65832__                        00000000 
ACSR2                            0000DF74  | __65C02__                        00000000 
ACSR3                            0000DF76  | __65SC02__                       00000000 
ARTD0                            0000DF71  | C_FLAG                           00000001 
ARTD1                            0000DF73  | __65816__                        00000001 
ARTD2                            0000DF75  | ACCB                             00000002 
ARTD3                            0000DF77  | SET_BAUDRATE                     00000002 
BCR                              0000DF40  | Z_FLAG                           00000002 
BOOT_STRING                      0000074B  | ENTER_SLEEP                      00000003 
BRG_9600                         00000017  | G                                00000004 
B_FLAG                           00000010  | I_FLAG                           00000004 
C                                00000006  | RESET_ALL                        00000005 
CHECK_EXIST                      00000006  | C                                00000006 
COMMAND                          00000200  | CHECK_EXIST                      00000006 
CRLF_STRING                      00000764  | D_FLAG                           00000008 
C_FLAG                           00000001  | P                                00000008 
D_FLAG                           00000008  | W                                0000000A 
DiskRx                           0000073F  | FI                               0000000C 
DiskTx                           0000072F  | FO                               0000000E 
EIER                             0000DF47  | B_FLAG                           00000010 
EIFR                             0000DF45  | X_FLAG                           00000010 
ENTER_SLEEP                      00000003  | BRG_9600                         00000017 
FI                               0000000C  | M_FLAG                           00000020 
FO                               0000000E  | GET_STATUS                       00000022 
Function                         0000053C  | V_FLAG                           00000040 
Function1                        0000058A  | N_FLAG                           00000080 
Function10                       000005C7  | SET_FILE_NAME                    000000AA 
Function11                       000005D4  | COMMAND                          00000200 
Function12                       000005E1  | RESET                            00000400 
Function13                       000005E4  | Hex2                             00000445 
Function14                       000005E7  | Hex                              0000044E 
Function15                       000005EA  | Step                             00000465 
Function16                       000005ED  | Opcode                           000004CF 
Function17                       00000606  | OpcodeL                          000004DF 
Function18                       0000061F  | OpcodeS                          000004F6 
Function19                       00000628  | OpcodeA                          00000509 
Function2                        0000059E  | OpcodeJ                          00000512 
Function20                       00000631  | OpcodeT                          00000517 
Function21                       0000063A  | OpcodeF                          00000520 
Function22                       00000646  | OpcodeK                          00000529 
Function23                       00000648  | OpcodeX                          0000052C 
Function24                       0000064B  | Function                         0000053C 
Function25                       00000653  | Function1                        0000058A 
Function26                       0000065B  | Function2                        0000059E 
Function27                       0000065E  | Function3                        000005A9 
Function28                       00000661  | Function4                        000005B3 
Function29                       00000664  | Function5                        000005B3 
Function3                        000005A9  | Function6                        000005B3 
Function30                       00000667  | Function7                        000005B3 

Portable 65xx Assembler [17.12]

Function31                       0000066A  | Function8                        000005B3 
Function32                       0000067E  | Function9                        000005BD 
Function33                       00000689  | Function10                       000005C7 
Function34                       0000068C  | Function11                       000005D4 
Function35                       0000068F  | Function12                       000005E1 
Function36                       00000692  | Function13                       000005E4 
Function37                       000006B3  | Function14                       000005E7 
Function38                       000006D6  | Function15                       000005EA 
Function39                       000006DE  | Function16                       000005ED 
Function4                        000005B3  | Function17                       00000606 
Function5                        000005B3  | Function18                       0000061F 
Function6                        000005B3  | Function19                       00000628 
Function7                        000005B3  | Function20                       00000631 
Function8                        000005B3  | Function21                       0000063A 
Function9                        000005BD  | Function22                       00000646 
G                                00000004  | Function23                       00000648 
GET_STATUS                       00000022  | Function24                       0000064B 
Hex                              0000044E  | Function25                       00000653 
Hex2                             00000445  | Function26                       0000065B 
I_FLAG                           00000004  | Function27                       0000065E 
MEMH                             00C10000  | Function28                       00000661 
MEML                             00C00000  | Function29                       00000664 
M_FLAG                           00000020  | Function30                       00000667 
N_FLAG                           00000080  | Function31                       0000066A 
NewLine                          00000720  | Function32                       0000067E 
OSC_FREQ                         00384000  | Function33                       00000689 
Opcode                           000004CF  | Function34                       0000068C 
OpcodeA                          00000509  | Function35                       0000068F 
OpcodeF                          00000520  | Function36                       00000692 
OpcodeJ                          00000512  | Function37                       000006B3 
OpcodeK                          00000529  | Function38                       000006D6 
OpcodeL                          000004DF  | Function39                       000006DE 
OpcodeS                          000004F6  | SetFileName                      000006E6 
OpcodeT                          00000517  | SendCommand                      000006F8 
OpcodeX                          0000052C  | ReadStatus                       00000707 
P                                00000008  | UartTx                           00000708 
PCS7                             0000DF27  | UartRx                           00000715 
PD0                              0000DF00  | NewLine                          00000720 
PD1                              0000DF01  | Print                            00000723 
PD2                              0000DF02  | DiskTx                           0000072F 
PD3                              0000DF03  | DiskRx                           0000073F 
PD4                              0000DF20  | BOOT_STRING                      0000074B 
PD5                              0000DF21  | CRLF_STRING                      00000764 
PD6                              0000DF22  | PD0                              0000DF00 
PD7                              0000DF23  | PD1                              0000DF01 
PDD0                             0000DF04  | PD2                              0000DF02 
PDD1                             0000DF05  | PD3                              0000DF03 
PDD2                             0000DF06  | PDD0                             0000DF04 
PDD3                             0000DF07  | PDD1                             0000DF05 
PDD4                             0000DF24  | PDD2                             0000DF06 
PDD5                             0000DF25  | PDD3                             0000DF07 
PDD6                             0000DF26  | PD4                              0000DF20 
PIBER                            0000DF79  | PD5                              0000DF21 
PIBFR                            0000DF78  | PD6                              0000DF22 

Portable 65xx Assembler [17.12]

PIR2                             0000DF7A  | PD7                              0000DF23 
PIR3                             0000DF7B  | PDD4                             0000DF24 
PIR4                             0000DF7C  | PDD5                             0000DF25 
PIR5                             0000DF7D  | PDD6                             0000DF26 
PIR6                             0000DF7E  | PCS7                             0000DF27 
PIR7                             0000DF7F  | BCR                              0000DF40 
Print                            00000723  | SSCR                             0000DF41 
RESET                            00000400  | TCR                              0000DF42 
RESET_ALL                        00000005  | TER                              0000DF43 
ReadStatus                       00000707  | TIFR                             0000DF44 
SET_BAUDRATE                     00000002  | EIFR                             0000DF45 
SET_FILE_NAME                    000000AA  | TIER                             0000DF46 
SSCR                             0000DF41  | EIER                             0000DF47 
SendCommand                      000006F8  | UIFR                             0000DF48 
SetFileName                      000006E6  | UIER                             0000DF49 
Step                             00000465  | T0LL                             0000DF50 
T0CH                             0000DF61  | T0LH                             0000DF51 
T0CL                             0000DF60  | T1LL                             0000DF52 
T0LH                             0000DF51  | T1LH                             0000DF53 
T0LL                             0000DF50  | T2LL                             0000DF54 
T1CH                             0000DF63  | T2LH                             0000DF55 
T1CL                             0000DF62  | T3LL                             0000DF56 
T1LH                             0000DF53  | T3LH                             0000DF57 
T1LL                             0000DF52  | T4LL                             0000DF58 
T2CH                             0000DF65  | T4LH                             0000DF59 
T2CL                             0000DF64  | T5LL                             0000DF5A 
T2LH                             0000DF55  | T5LH                             0000DF5B 
T2LL                             0000DF54  | T6LL                             0000DF5C 
T3CH                             0000DF67  | T6LH                             0000DF5D 
T3CL                             0000DF66  | T7LL                             0000DF5E 
T3LH                             0000DF57  | T7LH                             0000DF5F 
T3LL                             0000DF56  | T0CL                             0000DF60 
T4CH                             0000DF69  | T0CH                             0000DF61 
T4CL                             0000DF68  | T1CL                             0000DF62 
T4LH                             0000DF59  | T1CH                             0000DF63 
T4LL                             0000DF58  | T2CL                             0000DF64 
T5CH                             0000DF6B  | T2CH                             0000DF65 
T5CL                             0000DF6A  | T3CL                             0000DF66 
T5LH                             0000DF5B  | T3CH                             0000DF67 
T5LL                             0000DF5A  | T4CL                             0000DF68 
T6CH                             0000DF6D  | T4CH                             0000DF69 
T6CL                             0000DF6C  | T5CL                             0000DF6A 
T6LH                             0000DF5D  | T5CH                             0000DF6B 
T6LL                             0000DF5C  | T6CL                             0000DF6C 
T7CH                             0000DF6F  | T6CH                             0000DF6D 
T7CL                             0000DF6E  | T7CL                             0000DF6E 
T7LH                             0000DF5F  | T7CH                             0000DF6F 
T7LL                             0000DF5E  | ACSR0                            0000DF70 
TCR                              0000DF42  | ARTD0                            0000DF71 
TER                              0000DF43  | ACSR1                            0000DF72 
TIER                             0000DF46  | ARTD1                            0000DF73 
TIFR                             0000DF44  | ACSR2                            0000DF74 
UIER                             0000DF49  | ARTD2                            0000DF75 
UIFR                             0000DF48  | ACSR3                            0000DF76 

Portable 65xx Assembler [17.12]

UartRx                           00000715  | ARTD3                            0000DF77 
UartTx                           00000708  | PIBFR                            0000DF78 
V_FLAG                           00000040  | PIBER                            0000DF79 
W                                0000000A  | PIR2                             0000DF7A 
X_FLAG                           00000010  | PIR3                             0000DF7B 
Z_FLAG                           00000002  | PIR4                             0000DF7C 
__6501__                         00000000  | PIR5                             0000DF7D 
__6502__                         00000000  | PIR6                             0000DF7E 
__65816__                        00000001  | PIR7                             0000DF7F 
__65832__                        00000000  | OSC_FREQ                         00384000 
__65C02__                        00000000  | MEML                             00C00000 
__65SC02__                       00000000  | MEMH                             00C10000 
